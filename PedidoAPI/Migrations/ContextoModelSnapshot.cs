// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PedidoAPI.DataContext;

namespace PedidoAPI.Migrations
{
    [DbContext(typeof(Contexto))]
    partial class ContextoModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PedidoAPI.Models.Embalagem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao");

                    b.Property<string>("Nome");

                    b.Property<int>("TempoPreparo");

                    b.Property<double>("Valor");

                    b.HasKey("Id");

                    b.ToTable("Embalagems");

                    b.HasData(
                        new { Id = 1, Descricao = "Copo Pequeno de 300 ML", Nome = "Pequeno", TempoPreparo = 5, Valor = 10.0 },
                        new { Id = 2, Descricao = "Copo Medio de 500 ML", Nome = "Medio", TempoPreparo = 7, Valor = 13.0 },
                        new { Id = 3, Descricao = "Copo Grande de 700 ML", Nome = "Grande", TempoPreparo = 10, Valor = 15.0 }
                    );
                });

            modelBuilder.Entity("PedidoAPI.Models.Opcionais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao");

                    b.Property<string>("Nome");

                    b.Property<int>("TempoAdd");

                    b.Property<double>("ValorAdd");

                    b.HasKey("Id");

                    b.ToTable("Opcionais");

                    b.HasData(
                        new { Id = 1, Descricao = "Será Adicionado Granola Como Opcional!", Nome = "Granola", TempoAdd = 0, ValorAdd = 0.0 },
                        new { Id = 2, Descricao = "Sera Adicionado Paçoca no Sorvete", Nome = "Paçoca", TempoAdd = 3, ValorAdd = 3.0 },
                        new { Id = 3, Descricao = "Sera Adicionado como opcional Leite ninho", Nome = "Leite Ninho", TempoAdd = 0, ValorAdd = 3.0 }
                    );
                });

            modelBuilder.Entity("PedidoAPI.Models.OpcionalPedido", b =>
                {
                    b.Property<int>("OpcionaisId");

                    b.Property<int>("PedidoId");

                    b.HasKey("OpcionaisId", "PedidoId");

                    b.HasIndex("PedidoId");

                    b.ToTable("OpcionalPedido");
                });

            modelBuilder.Entity("PedidoAPI.Models.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Finalizado");

                    b.Property<int>("SaborID");

                    b.Property<int>("TamanhoId");

                    b.Property<int>("TempoEspera");

                    b.Property<double>("ValorFinal");

                    b.HasKey("Id");

                    b.HasIndex("SaborID");

                    b.HasIndex("TamanhoId");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("PedidoAPI.Models.Sabor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddTempo");

                    b.Property<string>("Descricao");

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Sabores");

                    b.HasData(
                        new { Id = 1, AddTempo = 0, Descricao = "Sorvete de Açai Sabor Morango", Nome = "Morango" },
                        new { Id = 2, AddTempo = 0, Descricao = "Sorvete com Açai Sabor Banana", Nome = "Banana" },
                        new { Id = 3, AddTempo = 5, Descricao = "Sorvete de Açai  Com Kiwi", Nome = "Kiwi" }
                    );
                });

            modelBuilder.Entity("PedidoAPI.Models.OpcionalPedido", b =>
                {
                    b.HasOne("PedidoAPI.Models.Opcionais", "Opcionais")
                        .WithMany("Pedidos")
                        .HasForeignKey("OpcionaisId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PedidoAPI.Models.Pedido", "Pedido")
                        .WithMany("Opcional")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PedidoAPI.Models.Pedido", b =>
                {
                    b.HasOne("PedidoAPI.Models.Sabor", "Sabor")
                        .WithMany()
                        .HasForeignKey("SaborID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PedidoAPI.Models.Embalagem", "Tamanho")
                        .WithMany()
                        .HasForeignKey("TamanhoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
